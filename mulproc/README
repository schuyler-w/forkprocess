Program 1
Name: Schuyler Wang
cssc1766@edoras.sdsu.edu
July 13, 2023

In Program 1, mulproc.c forks two child processes to run the two programs testalphabet and testspecial generated in program 0.

mulproc.c starts by creating two pid_t type values to spawn child process forks.

The fork() function returns a pid_t value that can be used to determine whether or not the fork was a success.

If successful, the runAlpha() function is called, printing out the PID statement and then initiating the argument vector needed by execvp() to run testalphabet.

Then, a second fork occurs and the second child calls runSpecial which prints out the PID statement and executes testspecial.

Finally, we return to the parent process whereby the pid value returned by wait is stored in child_pid. child_pid is compared to the pid values of the first child which should be 1 value higher than the parent process.

This is so the final print statement is dynamic depending on which process ends first.

Result Output:

[cssc1766@edoras one]$ make
gcc -g -std=c99   -c -o mulproc.o mulproc.c
gcc -o mulproc mulproc.o
[cssc1766@edoras one]$ ./mulproc
CHILD <PID: 29470> process is executing testalphabet program!
CHILD <PID: 29471> process is executing testspecial program!
, -> 745668
. -> 798072
: -> 15708
; -> 32340
! -> 63228
CHILD <PID: 29471> process has done with testspecial program! See the results above!
a -> 2973036
b -> 556908
c -> 765864
d -> 1786752
e -> 4883076
f -> 765336
g -> 809292
h -> 2818068
i -> 2586276
j -> 35112
k -> 401412
l -> 1728276
m -> 1050852
n -> 2509320
o -> 2766192
p -> 562848
q -> 28776
r -> 2177076
s -> 2465496
t -> 3291684
u -> 1015608
v -> 276804
w -> 1085040
x -> 46860
y -> 730752
z -> 12936
CHILD <PID: 29470> process has done with testalphabet program! See the results above!